// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  hash     String

  email    String  @unique
  avatarID Int?    @unique
  name     String?

  stats String?

  chatSend    Chat[]   @relation("userSend")
  chatReceive Chat[]   @relation("userReceive")
  UserFirst   Friend[] @relation("userFirst")
  UserSecond  Friend[] @relation("userSecond")
  avatar      Images?  @relation("avatarId", fields: [avatarID], references: [id], map: "avatarId_fkey")
  // Groups       MemberOnGroup[]
  // CreatorGroup Group[]
  // GroupMessage GroupMessage[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@map("users")
}

model Chat {
  id            Int    @id @unique @default(autoincrement())
  type          String
  userSendId    Int
  userReceiveId Int

  messageId Int? @unique

  imageID Int? @unique

  stickerID Int? @unique

  callId Int? @unique

  status String?

  userSend    User @relation("userSend", fields: [userSendId], references: [id], map: "userSend_fkey")
  userReceive User @relation("userReceive", fields: [userReceiveId], references: [id], map: "userReceive_fkey")

  messages Messages? @relation("messageId", fields: [messageId], references: [id], map: "messageId_fkey")
  calls    Calls?    @relation("callId", fields: [callId], references: [id], map: "callId_fkey")
  image    Images?   @relation("imageId", fields: [imageID], references: [id], map: "imageId_fkey")
  sticker  Sticker?  @relation("stickerId", fields: [stickerID], references: [id], map: "stickerId_fkey")

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt

  @@map("chats")
}

model Messages {
  id     Int     @id @unique @default(autoincrement())
  value  String
  status String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt

  chat Chat? @relation("messageId")

  @@map("messages")
}

model Calls {
  id     Int     @id @unique @default(autoincrement())
  value  String
  status String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt

  chat Chat? @relation("callId")

  @@map("calls")
}

model Images {
  id Int @id @unique @default(autoincrement())

  status String?
  name   String
  url    String

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt

  chat Chat? @relation("imageId")
  user User? @relation("avatarId")

  @@map("images")
}

model Sticker {
  id Int @id @unique @default(autoincrement())

  status   String?
  category String
  name     String
  url      String

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updateAt  DateTime @updatedAt

  chat Chat? @relation("stickerId")

  @@map("stickers")
}

model Friend {
  id           Int @unique(map: "id_UNIQUE") @default(autoincrement())
  userFirstId  Int
  userSecondId Int

  status Int

  UserFirst  User @relation("userFirst", fields: [userFirstId], references: [id], map: "userFirst_fkey")
  UserSecond User @relation("userSecond", fields: [userSecondId], references: [id], map: "userSecond_fkey")

  createAt DateTime @default(now()) @db.Timestamp(6)
  updateAt DateTime @updatedAt

  @@id([userFirstId, userSecondId])
  @@map("friends")
}

// model Group {
//   id              Int       @id @default(autoincrement())
//   creatorId       Int
//   title           String?
//   lastMessageSent String?
//   lastMessageAt   DateTime? @updatedAt
//   avatar          String?

//   status String?

//   creator  User            @relation(fields: [creatorId], references: [id])
//   messages GroupMessage[]
//   Users    MemberOnGroup[]

//   createAt DateTime @default(now()) @db.Timestamp(6)
//   updateAt DateTime @updatedAt

//   @@map("groups")
// }

// model MemberOnGroup {
//   groupId  Int
//   memberId Int

//   permision Json?

//   status String?

//   member User  @relation(fields: [memberId], references: [id])
//   group  Group @relation(fields: [groupId], references: [id])

//   createAt DateTime @default(now()) @db.Timestamp(6)
//   updateAt DateTime @updatedAt

//   @@id([groupId, memberId])
//   @@map("members")
// }

// model GroupMessage {
//   id      Int @default(autoincrement())
//   groupId Int

//   memberSendId Int
//   message      String

//   status String?

//   Group    Group? @relation(fields: [groupId], references: [id])
//   userSend User?  @relation(fields: [memberSendId], references: [id])

//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt

//   @@id([id, groupId])
// }
